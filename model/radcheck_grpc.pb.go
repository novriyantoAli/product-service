// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: model/radcheck.proto

package model

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Radchecks_Find_FullMethodName      = "/model.Radchecks/Find"
	Radchecks_Save_FullMethodName      = "/model.Radchecks/Save"
	Radchecks_SaveBatch_FullMethodName = "/model.Radchecks/SaveBatch"
)

// RadchecksClient is the client API for Radchecks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadchecksClient interface {
	Find(ctx context.Context, in *Radcheck, opts ...grpc.CallOption) (*RadcheckList, error)
	Save(ctx context.Context, in *Radcheck, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveBatch(ctx context.Context, in *RadcheckList, opts ...grpc.CallOption) (*empty.Empty, error)
}

type radchecksClient struct {
	cc grpc.ClientConnInterface
}

func NewRadchecksClient(cc grpc.ClientConnInterface) RadchecksClient {
	return &radchecksClient{cc}
}

func (c *radchecksClient) Find(ctx context.Context, in *Radcheck, opts ...grpc.CallOption) (*RadcheckList, error) {
	out := new(RadcheckList)
	err := c.cc.Invoke(ctx, Radchecks_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radchecksClient) Save(ctx context.Context, in *Radcheck, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Radchecks_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radchecksClient) SaveBatch(ctx context.Context, in *RadcheckList, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Radchecks_SaveBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RadchecksServer is the server API for Radchecks service.
// All implementations must embed UnimplementedRadchecksServer
// for forward compatibility
type RadchecksServer interface {
	Find(context.Context, *Radcheck) (*RadcheckList, error)
	Save(context.Context, *Radcheck) (*empty.Empty, error)
	SaveBatch(context.Context, *RadcheckList) (*empty.Empty, error)
	mustEmbedUnimplementedRadchecksServer()
}

// UnimplementedRadchecksServer must be embedded to have forward compatible implementations.
type UnimplementedRadchecksServer struct {
}

func (UnimplementedRadchecksServer) Find(context.Context, *Radcheck) (*RadcheckList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedRadchecksServer) Save(context.Context, *Radcheck) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedRadchecksServer) SaveBatch(context.Context, *RadcheckList) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBatch not implemented")
}
func (UnimplementedRadchecksServer) mustEmbedUnimplementedRadchecksServer() {}

// UnsafeRadchecksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadchecksServer will
// result in compilation errors.
type UnsafeRadchecksServer interface {
	mustEmbedUnimplementedRadchecksServer()
}

func RegisterRadchecksServer(s grpc.ServiceRegistrar, srv RadchecksServer) {
	s.RegisterService(&Radchecks_ServiceDesc, srv)
}

func _Radchecks_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Radcheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadchecksServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radchecks_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadchecksServer).Find(ctx, req.(*Radcheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radchecks_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Radcheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadchecksServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radchecks_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadchecksServer).Save(ctx, req.(*Radcheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radchecks_SaveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadcheckList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadchecksServer).SaveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radchecks_SaveBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadchecksServer).SaveBatch(ctx, req.(*RadcheckList))
	}
	return interceptor(ctx, in, info, handler)
}

// Radchecks_ServiceDesc is the grpc.ServiceDesc for Radchecks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Radchecks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Radchecks",
	HandlerType: (*RadchecksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _Radchecks_Find_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Radchecks_Save_Handler,
		},
		{
			MethodName: "SaveBatch",
			Handler:    _Radchecks_SaveBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/radcheck.proto",
}
